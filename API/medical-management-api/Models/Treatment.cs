/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Eu.InCloud.Medical.Management.Dtos;
using Eu.InCloud.Medical.Management.Services;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Treatment : IEquatable<Treatment>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type")]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MainDoctorId
        /// </summary>
        [Required]
        [DataMember(Name="mainDoctorId")]
        public int MainDoctorId { get; set; }

        /// <summary>
        /// Gets or Sets OtherDoctrsId
        /// </summary>
        [DataMember(Name="otherDoctorsId")]
        public List<int> OtherDoctorsId { get; set; }

        /// <summary>
        /// Gets or Sets RoomNumber
        /// </summary>
        [DataMember(Name="roomNumber")]
        public string RoomNumber { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status")]
        public int Status { get; set; }


        public static TreatmentDto ConvertToTreatmentDto(Treatment treatment, IEmployeeRepository employeeRepo){
            var mainDoctorObj = new SimpleEmployee(employeeRepo.GetEmployeeById(treatment.MainDoctorId));
            var otherDoctorsObj = employeeRepo.GetEmployeesByIds(treatment.OtherDoctorsId).ToList().Select(x => new SimpleEmployee(x)).ToList();
            var treatmentDto = new TreatmentDto{
                Id = treatment.Id,
                Title = treatment.Title,
                Type = treatment.Type,
                Description = treatment.Description,
                MainDoctorObject = mainDoctorObj,
                OtherDoctorsObject = otherDoctorsObj,
                RoomNumber = treatment.RoomNumber,
                Date = treatment.Date,
                Status = treatment.Status
            };
            return treatmentDto;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Treatment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MainDoctorId: ").Append(MainDoctorId).Append("\n");
            sb.Append("  OtherDoctorsId: ").Append(OtherDoctorsId).Append("\n");
            sb.Append("  RoomNumber: ").Append(RoomNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Treatment)obj);
        }

        /// <summary>
        /// Returns true if Treatment instances are equal
        /// </summary>
        /// <param name="other">Instance of Treatment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Treatment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != 0 &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != 0 &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Status == other.Status ||
                    Status != 0 &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    MainDoctorId == other.MainDoctorId ||
                    MainDoctorId != 0 &&
                    MainDoctorId.Equals(other.MainDoctorId)
                ) &&
                (
                    OtherDoctorsId == other.OtherDoctorsId ||
                    OtherDoctorsId != null &&
                    OtherDoctorsId.SequenceEqual(other.OtherDoctorsId)
                ) && 
                (
                    RoomNumber == other.RoomNumber ||
                    RoomNumber != null &&
                    RoomNumber.Equals(other.RoomNumber)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != 0)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != 0)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (MainDoctorId != 0)
                    hashCode = hashCode * 59 + MainDoctorId.GetHashCode();
                    if (OtherDoctorsId != null)
                    hashCode = hashCode * 59 + OtherDoctorsId.GetHashCode();
                    if (RoomNumber != null)
                    hashCode = hashCode * 59 + RoomNumber.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Treatment left, Treatment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Treatment left, Treatment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

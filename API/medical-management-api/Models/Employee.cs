/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Employee : IEquatable<Employee>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Personal
        /// </summary>
        [Required]
        [DataMember(Name="personal")]
        public Personal Personal { get; set; }

        /// <summary>
        /// Gets or Sets Education
        /// </summary>
        [Required]
        [DataMember(Name="education")]
        public Education Education { get; set; }

        /// <summary>
        /// Gets or Sets WorkExperience
        /// </summary>
        [Required]
        [DataMember(Name="workExperience")]
        public WorkExperience WorkExperience { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [Required]
        [DataMember(Name="role")]
        public int Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  WorkExperience: ").Append(WorkExperience).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Employee)obj);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="other">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != 0 &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Personal == other.Personal ||
                    Personal != null &&
                    Personal.Equals(other.Personal)
                ) && 
                (
                    Education == other.Education ||
                    Education != null &&
                    Education.Equals(other.Education)
                ) && 
                (
                    WorkExperience == other.WorkExperience ||
                    WorkExperience != null &&
                    WorkExperience.Equals(other.WorkExperience)
                ) && 
                (
                    Role == other.Role ||
                    Role != 0 &&
                    Role.Equals(other.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != 0)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Personal != null)
                    hashCode = hashCode * 59 + Personal.GetHashCode();
                    if (Education != null)
                    hashCode = hashCode * 59 + Education.GetHashCode();
                    if (WorkExperience != null)
                    hashCode = hashCode * 59 + WorkExperience.GetHashCode();
                    if (Role != 0)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Employee left, Employee right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Employee left, Employee right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

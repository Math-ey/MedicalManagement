/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Education : IEquatable<Education>
    { 
        /// <summary>
        /// Gets or Sets HighestEducationalLevelAttained
        /// </summary>
        [Required]
        [DataMember(Name="highestEducationalLevelAttained")]
        public int? HighestEducationalLevelAttained { get; set; }

        /// <summary>
        /// Gets or Sets Degree
        /// </summary>
        [Required]
        [DataMember(Name="degree")]
        public string Degree { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [Required]
        [DataMember(Name="schools")]
        public List<SchoolModel> Schools { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Education {\n");
            sb.Append("  HighestEducationalLevelAttained: ").Append(HighestEducationalLevelAttained).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Education)obj);
        }

        /// <summary>
        /// Returns true if Education instances are equal
        /// </summary>
        /// <param name="other">Instance of Education to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Education other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HighestEducationalLevelAttained == other.HighestEducationalLevelAttained ||
                    HighestEducationalLevelAttained != null &&
                    HighestEducationalLevelAttained.Equals(other.HighestEducationalLevelAttained)
                ) && 
                (
                    Degree == other.Degree ||
                    Degree != null &&
                    Degree.Equals(other.Degree)
                ) && 
                (
                    Schools == other.Schools ||
                    Schools != null &&
                    Schools.SequenceEqual(other.Schools)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HighestEducationalLevelAttained != null)
                    hashCode = hashCode * 59 + HighestEducationalLevelAttained.GetHashCode();
                    if (Degree != null)
                    hashCode = hashCode * 59 + Degree.GetHashCode();
                    if (Schools != null)
                    hashCode = hashCode * 59 + Schools.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Education left, Education right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Education left, Education right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class JobModel : IEquatable<JobModel>
    { 
        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [Required]
        [DataMember(Name="companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [Required]
        [DataMember(Name="companyAddress")]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// Gets or Sets CompanyPosition
        /// </summary>
        [Required]
        [DataMember(Name="companyPosition")]
        public string CompanyPosition { get; set; }

        /// <summary>
        /// Gets or Sets WorkDescription
        /// </summary>
        [DataMember(Name="workDescription")]
        public string WorkDescription { get; set; }

        /// <summary>
        /// Gets or Sets HiredInCompanyFromDate
        /// </summary>
        [Required]
        [DataMember(Name="hiredInCompanyFromDate")]
        public DateTime? HiredInCompanyFromDate { get; set; }

        /// <summary>
        /// Gets or Sets HiredInCompanyToDate
        /// </summary>
        [Required]
        [DataMember(Name="hiredInCompanyToDate")]
        public DateTime? HiredInCompanyToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobModel {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  CompanyPosition: ").Append(CompanyPosition).Append("\n");
            sb.Append("  WorkDescription: ").Append(WorkDescription).Append("\n");
            sb.Append("  HiredInCompanyFromDate: ").Append(HiredInCompanyFromDate).Append("\n");
            sb.Append("  HiredInCompanyToDate: ").Append(HiredInCompanyToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JobModel)obj);
        }

        /// <summary>
        /// Returns true if JobModel instances are equal
        /// </summary>
        /// <param name="other">Instance of JobModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    CompanyAddress == other.CompanyAddress ||
                    CompanyAddress != null &&
                    CompanyAddress.Equals(other.CompanyAddress)
                ) && 
                (
                    CompanyPosition == other.CompanyPosition ||
                    CompanyPosition != null &&
                    CompanyPosition.Equals(other.CompanyPosition)
                ) && 
                (
                    WorkDescription == other.WorkDescription ||
                    WorkDescription != null &&
                    WorkDescription.Equals(other.WorkDescription)
                ) && 
                (
                    HiredInCompanyFromDate == other.HiredInCompanyFromDate ||
                    HiredInCompanyFromDate != null &&
                    HiredInCompanyFromDate.Equals(other.HiredInCompanyFromDate)
                ) && 
                (
                    HiredInCompanyToDate == other.HiredInCompanyToDate ||
                    HiredInCompanyToDate != null &&
                    HiredInCompanyToDate.Equals(other.HiredInCompanyToDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (CompanyAddress != null)
                    hashCode = hashCode * 59 + CompanyAddress.GetHashCode();
                    if (CompanyPosition != null)
                    hashCode = hashCode * 59 + CompanyPosition.GetHashCode();
                    if (WorkDescription != null)
                    hashCode = hashCode * 59 + WorkDescription.GetHashCode();
                    if (HiredInCompanyFromDate != null)
                    hashCode = hashCode * 59 + HiredInCompanyFromDate.GetHashCode();
                    if (HiredInCompanyToDate != null)
                    hashCode = hashCode * 59 + HiredInCompanyToDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JobModel left, JobModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JobModel left, JobModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

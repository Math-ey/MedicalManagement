/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Personal : IEquatable<Personal>
    { 
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [Required]
        [DataMember(Name="gender")]
        public int Gender { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [Required]
        [DataMember(Name="birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets BirthPlace
        /// </summary>
        [Required]
        [DataMember(Name="birthPlace")]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Gets or Sets Citizenship
        /// </summary>
        [Required]
        [DataMember(Name="citizenship")]
        public string Citizenship { get; set; }

        /// <summary>
        /// Gets or Sets MaritalStatus
        /// </summary>
        [Required]
        [DataMember(Name="maritalStatus")]
        public int MaritalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name="picture")]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [Required]
        [DataMember(Name="street")]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets HouseNumber
        /// </summary>
        [Required]
        [DataMember(Name="houseNumber")]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [Required]
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [Required]
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [Required]
        [DataMember(Name="zipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [Required]
        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Personal {\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthPlace: ").Append(BirthPlace).Append("\n");
            sb.Append("  Citizenship: ").Append(Citizenship).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Personal)obj);
        }

        /// <summary>
        /// Returns true if Personal instances are equal
        /// </summary>
        /// <param name="other">Instance of Personal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Personal other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gender == other.Gender ||
                    Gender != 0 &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    BirthDate == other.BirthDate ||
                    BirthDate != null &&
                    BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    BirthPlace == other.BirthPlace ||
                    BirthPlace != null &&
                    BirthPlace.Equals(other.BirthPlace)
                ) && 
                (
                    Citizenship == other.Citizenship ||
                    Citizenship != null &&
                    Citizenship.Equals(other.Citizenship)
                ) && 
                (
                    MaritalStatus == other.MaritalStatus ||
                    MaritalStatus != 0 &&
                    MaritalStatus.Equals(other.MaritalStatus)
                ) && 
                (
                    Picture == other.Picture ||
                    Picture != null &&
                    Picture.Equals(other.Picture)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    HouseNumber == other.HouseNumber ||
                    HouseNumber != null &&
                    HouseNumber.Equals(other.HouseNumber)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ZipCode == other.ZipCode ||
                    ZipCode != null &&
                    ZipCode.Equals(other.ZipCode)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gender != 0)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                    if (BirthPlace != null)
                    hashCode = hashCode * 59 + BirthPlace.GetHashCode();
                    if (Citizenship != null)
                    hashCode = hashCode * 59 + Citizenship.GetHashCode();
                    if (MaritalStatus != 0)
                    hashCode = hashCode * 59 + MaritalStatus.GetHashCode();
                    if (Picture != null)
                    hashCode = hashCode * 59 + Picture.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (HouseNumber != null)
                    hashCode = hashCode * 59 + HouseNumber.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ZipCode != null)
                    hashCode = hashCode * 59 + ZipCode.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Personal left, Personal right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Personal left, Personal right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

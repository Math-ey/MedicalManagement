/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Eu.InCloud.Medical.Management.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SchoolModel : IEquatable<SchoolModel>
    { 
        /// <summary>
        /// Gets or Sets SchoolName
        /// </summary>
        [DataMember(Name="schoolName")]
        public string SchoolName { get; set; }

        /// <summary>
        /// Gets or Sets SchoolAddress
        /// </summary>
        [DataMember(Name="schoolAddress")]
        public string SchoolAddress { get; set; }

        /// <summary>
        /// Gets or Sets SchoolSpecialisation
        /// </summary>
        [DataMember(Name="schoolSpecialisation")]
        public string SchoolSpecialisation { get; set; }

        /// <summary>
        /// Gets or Sets SttendFromYear
        /// </summary>
        [DataMember(Name="attendFromYear")]
        public string AttendFromYear { get; set; }

        /// <summary>
        /// Gets or Sets AttendToYear
        /// </summary>
        [DataMember(Name="attendToYear")]
        public string AttendToYear { get; set; }

        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobModel {\n");
            sb.Append("  SchoolName: ").Append(SchoolName).Append("\n");
            sb.Append("  SchoolAddress: ").Append(SchoolAddress).Append("\n");
            sb.Append("  SchoolSpecialisation: ").Append(SchoolSpecialisation).Append("\n");
            sb.Append("  AttendFromYear: ").Append(AttendFromYear).Append("\n");
            sb.Append("  AttendToYear: ").Append(AttendToYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SchoolModel)obj);
        }

        /// <summary>
        /// Returns true if JobModel instances are equal
        /// </summary>
        /// <param name="other">Instance of JobModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchoolName == other.SchoolName ||
                    SchoolName != null &&
                    SchoolName.Equals(other.SchoolName)
                ) && 
                (
                    SchoolAddress == other.SchoolAddress ||
                    SchoolAddress != null &&
                    SchoolAddress.Equals(other.SchoolAddress)
                ) && 
                (
                    SchoolSpecialisation == other.SchoolSpecialisation ||
                    SchoolSpecialisation != null &&
                    SchoolSpecialisation.Equals(other.SchoolSpecialisation)
                ) && 
                (
                    AttendFromYear == other.AttendFromYear ||
                    AttendFromYear != null &&
                    AttendFromYear.Equals(other.AttendFromYear)
                ) && 
                (
                    AttendToYear == other.AttendToYear ||
                    AttendToYear != null &&
                    AttendToYear.Equals(other.AttendToYear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchoolName != null)
                    hashCode = hashCode * 59 + SchoolName.GetHashCode();
                    if (SchoolAddress != null)
                    hashCode = hashCode * 59 + SchoolAddress.GetHashCode();
                    if (SchoolSpecialisation != null)
                    hashCode = hashCode * 59 + SchoolSpecialisation.GetHashCode();
                    if (AttendFromYear != null)
                    hashCode = hashCode * 59 + AttendFromYear.GetHashCode();
                    if (AttendToYear != null)
                    hashCode = hashCode * 59 + AttendToYear.GetHashCode();
                    
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SchoolModel left, SchoolModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SchoolModel left, SchoolModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

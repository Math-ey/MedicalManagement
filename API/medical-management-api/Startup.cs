/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pisarcik.andrej@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using Eu.InCloud.Medical.Management.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;

namespace Eu.InCloud.Medical.Management {
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup {
        private IConfiguration Configuration { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup (IConfiguration configuration) {
            Configuration = configuration;
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices (IServiceCollection services) {
            // Add framework services.
            services.AddMvc ();
            services.AddControllers ().AddNewtonsoftJson (opt => {
                opt.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver ();
                opt.SerializerSettings.Converters.Add (new StringEnumConverter {
                    NamingStrategy = new CamelCaseNamingStrategy ()
                });
            }).AddXmlSerializerFormatters ();

            // Register the Swagger generator, defining 1 or more Swagger documents
            services
                .AddSwaggerGen (c => {
                    c.SwaggerDoc ("1.0.0-oas3", new OpenApiInfo {
                        Version = "1.0.0-oas3",
                            Title = "Medical managment API",
                            Description = "Medical managment API (ASP.NET Core 2.0)",
                            Contact = new OpenApiContact () {
                                Name = "Swagger Codegen AddDataReContributors",
                                    Url = new Uri ("https://github.com/swagger-api/swagger-codegen"),
                                    Email = "pisarcik.andrej@hotmail.com"
                            }
                    });
                });

            // Register the application services
            services.AddSingleton (typeof (ILiteDbContext), typeof (LiteDbContext));
            services.AddScoped<IEmployeeRepository, EmployeeRepository>();
            services.AddScoped<ITreatmentRepository, TreatmentRepository>();

        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        /// <param name="loggerFactory"></param>
        public void Configure (IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory) {
            if (env.IsDevelopment ()) {
                app.UseDeveloperExceptionPage ();
            } else {
                //TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
                // app.UseExceptionHandler("/Home/Error");
            }

            app.UseRouting();

            // app.UseDefaultFiles();
            // app.UseStaticFiles();
            app.UseSwagger ();
            app.UseSwaggerUI (c => {
                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                c.SwaggerEndpoint ("/swagger/1.0.0-oas3/swagger.json", "Waiting List API");

                //TODO: Or alternatively use the original Swagger contract that's included in the static files
                // c.SwaggerEndpoint("/swagger-original.json", "Waiting List API Original");
            });

            app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

            app.UseEndpoints (endpoints => {
                endpoints.MapControllers ();
            }); 
        }
    }
}
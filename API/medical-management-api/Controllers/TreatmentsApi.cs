/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Eu.InCloud.Medical.Management.Attributes;

using Microsoft.AspNetCore.Authorization;
using Eu.InCloud.Medical.Management.Models;
using Eu.InCloud.Medical.Management.Services;
using Eu.InCloud.Medical.Management.Dtos;

namespace Eu.InCloud.Medical.Management.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TreatmentsApiController : ControllerBase
    {
        private ITreatmentRepository _treatmentsRepo;
        private IEmployeeRepository _employeeRepo;


        public TreatmentsApiController(ITreatmentRepository treatmentsRepo, IEmployeeRepository employeeRepo)
        {
            _treatmentsRepo = treatmentsRepo;
            _employeeRepo = employeeRepo;

        }

        [HttpGet]
        [Route("/api/treatment-list")]
        [ValidateModelState]
        [SwaggerOperation("GetAllTreatments")]
        [SwaggerResponse(statusCode: 200, type: typeof(IEnumerable<TreatmentDto>), description: "array of treatments")]
        public virtual IActionResult GetAllTreatments()
        {
            var treatmentList = this._treatmentsRepo.GetAllTreatments();
            var treatmentDtoList = treatmentList.Select(x => Treatment.ConvertToTreatmentDto(x, _employeeRepo)).ToList();

            return Ok(treatmentDtoList);
        }

        /// <summary>
        /// Get specific treatment
        /// </summary>
        /// <remarks>Returns specific treatment by ID</remarks>
        /// <param name="treatmentId">pass the id of the particular treatment</param>
        /// <response code="200">treatment model</response>
        [HttpGet]
        [Route("/api/treatment/{treatmentId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTreatmentById")]
        [SwaggerResponse(statusCode: 200, type: typeof(TreatmentDto), description: "treatment model")]
        public virtual IActionResult GetTreatmentById([FromRoute][Required]int treatmentId)
        {
            var treatment = this._treatmentsRepo.GetTreatmentById(treatmentId);

            if (treatment == null)
                return NotFound();

            var treatmentDto = Treatment.ConvertToTreatmentDto(treatment, _employeeRepo);
            
            return Ok(treatmentDto);
        }

        /// <summary>
        /// Creates new treatment
        /// </summary>
        /// <remarks>Stores new treatment</remarks>
        /// <param name="body">Treatment model to create</param>
        /// <response code="200">treatment created</response>
        /// <response code="400">treatment object invalid</response>
        /// <response code="409">the provided treatment already exists</response>
        [HttpPost]
        [Route("/api/treatment")]
        [ValidateModelState]
        [SwaggerOperation("CreateTreatment")]
        public virtual IActionResult CreateTreatment([FromBody]TreatmentDto body)
        {
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            var treatment = this._treatmentsRepo.CreateTreatment(TreatmentDto.ConvertToTreatmentModel(body));
            var treatmentDto = Treatment.ConvertToTreatmentDto(treatment, _employeeRepo);
        
            return Ok(treatmentDto);
        }

        /// <summary>
        /// Deletes specific treatment
        /// </summary>
        /// <param name="treatmentId">pass the id of the particular treatment</param>
        /// <response code="200">Item deleted</response>
        /// <response code="404">Treatment with such ID does not exists</response>
        [HttpDelete]
        [Route("/api/treatment/{treatmentId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTreatment")]
        public virtual IActionResult DeleteTreatment([FromRoute][Required]int treatmentId)
        {
            var isDeleted = this._treatmentsRepo.DeleteTreatment(treatmentId);
            if (isDeleted == false)
                return NotFound();

            return Ok();
        }

        /// <summary>
        /// Provides list of treatment enums
        /// </summary>
        /// <remarks>You can retrieve treatment enums.</remarks>
        /// <response code="200">treatment enums</response>
        [HttpGet]
        [Route("/api/treatment-enums")]
        [ValidateModelState]
        [SwaggerOperation("GetTreatmentEnums")]
        [SwaggerResponse(statusCode: 200, type: typeof(TreatmentEnumsDto), description: "treatment enums")]
        public virtual IActionResult GetTreatmentEnums()
        { 
            var treatmentEnums = new TreatmentEnumsDto{
                TreatmentTypes = this._treatmentsRepo.GetTreatmentTypes().ToList(),
                TreatmentStatus = this._treatmentsRepo.GetTreatmentStatus().ToList()
            };

            return Ok(treatmentEnums);
        }

        /// <summary>
        /// Updates existing treatment
        /// </summary>>
        /// <param name="body">Treatment model to update</param>
        /// <response code="200">treatment updated</response>
        /// <response code="400">treatment object invalid</response>
        /// <response code="404">employee not found</response>
        [HttpPut]
        [Route("/api/treatment")]
        [ValidateModelState]
        [SwaggerOperation("UpdateTreatment")]
        public virtual IActionResult UpdateTreatment([FromBody]TreatmentDto body)
        {
            if (body.Id == 0) {
                return BadRequest("Invalid ID supplied");
            }

            var treatment = this._treatmentsRepo.UpdateTreatment(TreatmentDto.ConvertToTreatmentModel(body));
            if (treatment == null)
                return NotFound();

            var treatmentDto = Treatment.ConvertToTreatmentDto(treatment, _employeeRepo);

            return Ok(treatmentDto);
        }
    }
}

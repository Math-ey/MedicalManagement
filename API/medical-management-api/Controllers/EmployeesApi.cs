/*
 * Medical managment API
 *
 * Medical managment API for hospital staff and treatments managment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matej.mikus96@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Eu.InCloud.Medical.Management.Attributes;

using Microsoft.AspNetCore.Authorization;
using Eu.InCloud.Medical.Management.Models;
using Eu.InCloud.Medical.Management.Services;
using Eu.InCloud.Medical.Management.Dtos;

namespace Eu.InCloud.Medical.Management.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmployeesApiController : ControllerBase
    {
        private IEmployeeRepository _employeeRepo;

        public EmployeesApiController(IEmployeeRepository employeeRepo)
        {
            this._employeeRepo = employeeRepo;
        }
        /// <summary>
        /// Creates new employee
        /// </summary>
        /// <remarks>Stores new employee</remarks>
        /// <param name="body">Employee model to create</param>
        /// <response code="200">employee created</response>
        /// <response code="400">employee object invalid</response>
        /// <response code="409">an existing employee already exists</response>
        [HttpPost]
        [Route("/api/employee")]
        [ValidateModelState]
        [SwaggerOperation("CreateEmployee")]
        public virtual IActionResult CreateEmployee(Employee body)
        {
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            var employee = this._employeeRepo.CreateEmployee(body);
            return Ok(employee);
        }

        /// <summary>
        /// Get specific employee
        /// </summary>
        /// <remarks>Returns specific employee by ID</remarks>
        /// <param name="employeeId">pass the id of the particular employee</param>
        /// <response code="200">employee model</response>
        [HttpGet]
        [Route("/api/employee/{employeeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetEmployeeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "employee model")]
        public virtual IActionResult GetEmployeeById([FromRoute][Required]int employeeId)
        { 
            var employee = this._employeeRepo.GetEmployeeById(employeeId);

            if (employee == null)
                return NotFound();
            
            return Ok(employee);
        }

        /// <summary>
        /// Deletes specific employee
        /// </summary>
        /// <param name="employeeId">pass the id of the particular employee</param>
        /// <response code="200">Item deleted</response>
        /// <response code="404">Employee with such ID does not exists</response>
        [HttpDelete]
        [Route("/api/employee/{employeeId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEmployee")]
        public virtual IActionResult DeleteEmployee([FromRoute][Required]int employeeId)
        {   
            try
            {
                var isDeleted = this._employeeRepo.DeleteEmployee(employeeId);

                if (isDeleted == false)
                    return NotFound();

                return Ok();
            }
            catch (Exception e)
            {
                return BadRequest(e.Message);
            }
      
        }

        /// <summary>
        /// Provides list of employee enums
        /// </summary>
        /// <remarks>You can retrieve employee enums.</remarks>
        /// <response code="200">employee enums</response>
        [HttpGet]
        [Route("/api/employee-enums")]
        [ValidateModelState]
        [SwaggerOperation("GetEmployeeEnums")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmployeeEnumsDto), description: "employee enums")]
        public virtual IActionResult GetEmployeeEnums()
        { 
            var employeeEnums = new EmployeeEnumsDto{
                MaritalStatus = this._employeeRepo.GetMaritalStatus().ToList(),
                Roles = this._employeeRepo.GetRoles().ToList(),
                Genders = this._employeeRepo.GetGenders().ToList(),
                EducationalLevels = this._employeeRepo.GetEducationalLevels().ToList()
            };

            return Ok(employeeEnums);
        }
        
        /// <summary>
        /// Provides employee list of the hospital
        /// </summary>
        /// <remarks>You can retrieve employee list of the hospital using pagination.</remarks>
        /// <param name="query">The query to search employees by first name and last name.</param>
        /// <param name="paginationParams">Pagination params.</param>
        /// <response code="200">array of the waiting list entries</response>
        /// <response code="400">Error</response>
        [HttpGet]
        [Route("/api/employee-list")]
        [ValidateModelState]
        [SwaggerOperation("GetAmbulanceDetails")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmployeeListDto), description: "array of the waiting list entries")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Error")]
        public virtual IActionResult GetEmployeeList([FromQuery]PaginationParameters paginationParams, [FromQuery]string query)
        {
            var employeeList = this._employeeRepo.GetEmployeeList(query, paginationParams);

            return Ok(employeeList);
        }

        /// <summary>
        /// Updates existing employee
        /// </summary>
        /// <param name="body">Employee model to update</param>
        /// <response code="200">employee updated</response>
        /// <response code="400">employee object invalid</response>
        /// <response code="404">employee not found</response>
        [HttpPut]
        [Route("/api/employee")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEmployee")]
        public virtual IActionResult UpdateEmployee(Employee body)
        {
            if (body.Id == 0) {
                return BadRequest("Invalid ID supplied");
            }

            var employee = this._employeeRepo.UpdateEmployee(body);
            if (employee == null)
                return NotFound();

            return Ok(employee);
        }
    }
}
